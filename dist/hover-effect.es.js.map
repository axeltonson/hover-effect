{"version":3,"file":"hover-effect.es.js","sources":["../src/hover-effect.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport TweenMax from 'gsap/TweenMax';\r\n\r\nexport default function (opts) {\r\n  var vertex = `\r\nvarying vec2 vUv;\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`;\r\n\r\n  var fragment = `\r\nvarying vec2 vUv;\r\nuniform float dispFactor;\r\nuniform sampler2D disp;\r\nuniform sampler2D texture1;\r\nuniform sampler2D texture2;\r\nuniform float angle1;\r\nuniform float angle2;\r\nuniform float intensity1;\r\nuniform float intensity2;\r\nuniform float canvasWidth;\r\nuniform float canvasHeight;\r\nuniform float image1Width;\r\nuniform float image1Height;\r\nuniform float image2Width;\r\nuniform float image2Height;\r\nmat2 getRotM(float angle) {\r\n  float s = sin(angle);\r\n  float c = cos(angle);\r\n  return mat2(c, -s, s, c);\r\n}\r\n// Proportion script from here: https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\r\nvec2 addProportionToDistortedPosition(vec2 originalDistortedPos, float imgWidth, float imgHeight){\r\n  /* Set proportion code */\r\n  vec2 s = vec2(canvasWidth, canvasHeight); // Screen\r\n  vec2 i = vec2(imgWidth, imgHeight); // Image\r\n  float rs = s.x / s.y;\r\n  float ri = i.x / i.y;\r\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\r\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\r\n  return originalDistortedPos * s / new + offset;\r\n  /* End set proportion code */\r\n} \r\nvoid main() {\r\n  vec4 disp = texture2D(disp, vUv);\r\n  vec2 dispVec = vec2(disp.r, disp.g);\r\n  vec2 distortedPosition1 = vUv + getRotM(angle1) * dispVec * intensity1 * dispFactor;\r\n  vec2 distortedPosition2 = vUv + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\r\n  distortedPosition1 = addProportionToDistortedPosition(distortedPosition1, image1Width, image1Height);\r\n  distortedPosition2 = addProportionToDistortedPosition(distortedPosition2, image2Width, image2Height);\r\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\r\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\r\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\r\n}\r\n`;\r\n\r\n  // please respect authorship and do not remove\r\n  console.log('%c Hover effect by Robin Delaporte: https://github.com/robin-dela/hover-effect ', 'color: #bada55; font-size: 0.8rem');\r\n\r\n\r\n  function firstDefined() {\r\n    for (var i = 0; i < arguments.length; i++) {\r\n      if (arguments[i] !== undefined) return arguments[i];\r\n    }\r\n  }\r\n\r\n  var parent = opts.parent;\r\n  var dispImage = opts.displacementImage;\r\n  var image1 = opts.image1;\r\n  var image2 = opts.image2;\r\n  var intensity1 = firstDefined(opts.intensity1, opts.intensity, 1);\r\n  var intensity2 = firstDefined(opts.intensity2, opts.intensity, 1);\r\n  var commonAngle = firstDefined(opts.angle, Math.PI / 4); // 45 degrees by default, so grayscale images work correctly\r\n  var angle1 = firstDefined(opts.angle1, commonAngle);\r\n  var angle2 = firstDefined(opts.angle2, -commonAngle * 3);\r\n  var speedIn = firstDefined(opts.speedIn, opts.speed, 1.6);\r\n  var speedOut = firstDefined(opts.speedOut, opts.speed, 1.2);\r\n  var userHover = firstDefined(opts.hover, true);\r\n  var easing = firstDefined(opts.easing, Expo.easeOut);\r\n  var video = firstDefined(opts.video, false);\r\n\r\n  if (!parent) {\r\n    console.warn('Parent missing');\r\n    return;\r\n  }\r\n\r\n  if (!(image1 && image2 && dispImage)) {\r\n    console.warn('One or more images are missing');\r\n    return;\r\n  }\r\n\r\n  var scene = new THREE.Scene();\r\n  var camera = new THREE.OrthographicCamera(\r\n    parent.offsetWidth / -2,\r\n    parent.offsetWidth / 2,\r\n    parent.offsetHeight / 2,\r\n    parent.offsetHeight / -2,\r\n    1,\r\n    1000\r\n  );\r\n\r\n  camera.position.z = 1;\r\n\r\n  var renderer = new THREE.WebGLRenderer({\r\n    antialias: false,\r\n    alpha: true\r\n  });\r\n\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  renderer.setClearColor(0xffffff, 0.0);\r\n  renderer.setSize(parent.offsetWidth, parent.offsetHeight);\r\n  parent.appendChild(renderer.domElement);\r\n\r\n  var render = function () {\r\n    // This will be called by the TextureLoader as well as TweenMax.\r\n    renderer.render(scene, camera);\r\n  };\r\n\r\n  var loader = new THREE.TextureLoader();\r\n  loader.crossOrigin = '';\r\n\r\n  var disp = loader.load(dispImage, render);\r\n  disp.wrapS = disp.wrapT = THREE.RepeatWrapping;\r\n\r\n  if (video) {\r\n    var animate = function() {\r\n        requestAnimationFrame(animate);\r\n\r\n        renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    var video = document.createElement('video');\r\n    video.muted = true;\r\n    video.autoplay = true;\r\n    video.loop = true;\r\n    video.src = image1;\r\n    video.load();\r\n\r\n    var video2 = document.createElement('video');\r\n    video2.muted = true;\r\n    video2.autoplay = true;\r\n    video2.loop = true;\r\n    video2.src = image2;\r\n    video2.load();\r\n\r\n    var texture1 = new THREE.VideoTexture(video);\r\n    var texture2 = new THREE.VideoTexture(video2);\r\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\r\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\r\n\r\n    video2.addEventListener('loadeddata', function() {\r\n      video2.play();\r\n\r\n      texture2 = new THREE.VideoTexture(video2);\r\n      texture2.magFilter = THREE.LinearFilter;\r\n      texture2.minFilter = THREE.LinearFilter;\r\n\r\n      mat.uniforms.texture2.value = texture2;\r\n\r\n    }, false);\r\n\r\n    video.addEventListener('loadeddata', function() {\r\n      video.play();\r\n\r\n      texture1 = new THREE.VideoTexture(video);\r\n\r\n      texture1.magFilter = THREE.LinearFilter;\r\n      texture1.minFilter = THREE.LinearFilter;\r\n\r\n      mat.uniforms.texture1.value = texture1;\r\n    }, false);\r\n  } else {\r\n    var texture1 = loader.load(image1, function(texture){onTextureLoaded(texture, 1);});\r\n    var texture2 = loader.load(image2, function(texture){onTextureLoaded(texture, 2);});\r\n\r\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\r\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\r\n  }\r\n\r\n  var mat = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      intensity1: {\r\n        type: 'f',\r\n        value: intensity1\r\n      },\r\n      intensity2: {\r\n        type: 'f',\r\n        value: intensity2\r\n      },\r\n      dispFactor: {\r\n        type: 'f',\r\n        value: 0.0\r\n      },\r\n      angle1: {\r\n        type: 'f',\r\n        value: angle1\r\n      },\r\n      angle2: {\r\n        type: 'f',\r\n        value: angle2\r\n      },\r\n      texture1: {\r\n        type: 't',\r\n        value: texture1\r\n      },\r\n      texture2: {\r\n        type: 't',\r\n        value: texture2\r\n      },\r\n      disp: {\r\n        type: 't',\r\n        value: disp\r\n      },\r\n      canvasWidth: {\r\n        type: 'f',\r\n        value: parent.offsetWidth\r\n      },\r\n      canvasHeight: {\r\n        type: 'f',\r\n        value: parent.offsetHeight\r\n      },\r\n      image1Width: {\r\n        type: 'f',\r\n        value: 700\r\n      },\r\n      image1Height: {\r\n        type: 'f',\r\n        value: 700\r\n      },\r\n      image2Width: {\r\n        type: 'f',\r\n        value: 700\r\n      },\r\n      image2Height: {\r\n        type: 'f',\r\n        value: 700\r\n      }\r\n    },\r\n\r\n    vertexShader: vertex,\r\n    fragmentShader: fragment,\r\n    transparent: true,\r\n    opacity: 1.0,\r\n  });\r\n\r\n  var geometry = new THREE.PlaneBufferGeometry(parent.offsetWidth, parent.offsetHeight, 1);\r\n  var object = new THREE.Mesh(geometry, mat);\r\n  scene.add(object);\r\n\r\n  function onTextureLoaded(texture, texturePos){\r\n    var imgWidth = texture.image.width;\r\n    var imgHeight = texture.image.height;\r\n    if(texturePos == 1){\r\n      mat.uniforms.image1Width.value = imgWidth;\r\n      mat.uniforms.image1Height.value = imgHeight;\r\n    }\r\n    else{\r\n      mat.uniforms.image2Width.value = imgWidth;\r\n      mat.uniforms.image2Height.value = imgHeight;\r\n    }\r\n    render();\r\n  }\r\n\r\n  function transitionIn() {\r\n    TweenMax.to(mat.uniforms.dispFactor, speedIn, {\r\n      value: 1,\r\n      ease: easing,\r\n      onUpdate: render,\r\n      onComplete: render,\r\n    });\r\n  }\r\n\r\n  function transitionOut() {\r\n    TweenMax.to(mat.uniforms.dispFactor, speedOut, {\r\n      value: 0,\r\n      ease: easing,\r\n      onUpdate: render,\r\n      onComplete: render,\r\n    });\r\n  }\r\n\r\n  if (userHover) {\r\n    parent.addEventListener('mouseenter', transitionIn);\r\n    parent.addEventListener('touchstart', transitionIn);\r\n    parent.addEventListener('mouseleave', transitionOut);\r\n    parent.addEventListener('touchend', transitionOut);\r\n  }\r\n\r\n  window.addEventListener('resize', function (e) {\r\n    mat.uniforms.canvasWidth.value = parent.offsetWidth;\r\n    mat.uniforms.canvasHeight.value = parent.offsetHeight;\r\n    renderer.setSize(parent.offsetWidth, parent.offsetHeight);\r\n    render();\r\n  });\r\n\r\n  this.next = transitionIn;\r\n  this.previous = transitionOut;\r\n  renderer.setSize(parent.offsetWidth, parent.offsetHeight);\r\n};"],"names":["opts","firstDefined","i","arguments","length","undefined","console","log","parent","dispImage","displacementImage","image1","image2","intensity1","intensity","intensity2","commonAngle","angle","Math","PI","angle1","angle2","speedIn","speed","speedOut","userHover","hover","easing","Expo","easeOut","video","scene","THREE","camera","offsetWidth","offsetHeight","position","z","renderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","setClearColor","setSize","appendChild","domElement","render","loader","crossOrigin","disp","load","wrapS","wrapT","animate","requestAnimationFrame","document","createElement","muted","autoplay","loop","src","video2","texture1","texture2","magFilter","minFilter","addEventListener","play","mat","uniforms","value","texture","onTextureLoaded","type","dispFactor","canvasWidth","canvasHeight","image1Width","image1Height","image2Width","image2Height","vertexShader","fragmentShader","transparent","opacity","geometry","object","add","transitionIn","transitionOut","e","next","previous","warn","texturePos","imgWidth","image","width","imgHeight","height","TweenMax","to","ease","onUpdate","onComplete"],"mappings":"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"}